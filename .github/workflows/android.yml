name: Android CI

on: [pull_request, push]

env:
   AWS_ACCESS_KEY: ${{secrets.AWS_ACCESS_KEY}}
   AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
  

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: gradle

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew assembleDebug --stacktrace
      
    - name: zipping the test files
      uses: montudor/action-zip/@v1
      with:
        args: zip -qq -r tests.zip tests
    - name: upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: tests.zip
        path: ./tests.zip
    - name: upload app-debug.apk
      uses: actions/upload-artifact@v2
      with:
        name: app-debug.apk
        path: app/build/outputs/apk/debug/app-debug.apk 

  deviceFarmTest:
              needs: [build]
              runs-on: ubuntu-latest
              
              steps:
                - uses: actions/checkout@v3
                # - name: set up JDK 11
                #   uses: actions/setup-java@v3
                #   with:
                #     java-version: '11'
                #     distribution: 'temurin'
                #     cache: gradle

                # - name: Grant execute permission for gradlew
                #   run: chmod +x gradlew
                # - name: Test on devicefarm
                #   run: ./gradlew devicefarmUpload

                - name: download apk file
                  uses: actions/download-artifact@v2
                  with:
                    name: app-debug.apk
                    
                - name: download zip files
                  uses: actions/download-artifact@v2
                  with:
                    name: tests.zip

                - name: configure aws credentials
                  uses: aws-actions/configure-aws-credentials@master
                  with:
                    aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
                    aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                    aws-region: us-west-2

                - name: upload file
                  run: |
                    response_upload_app=$(aws devicefarm create-upload --project-arn ${{secrets.PROJECT_ARN}} --name app-debug.apk --type ANDROID_APP)
                    echo $response_upload_app
                    url_upload_app=$(echo $response_upload_app | jq '.upload.url' | sed -e 's/^"//' -e 's/"$//')
                    echo $url_upload_app
                    url_upload_arn=$(echo $response_upload_app | jq '.upload.arn' | sed -e 's/^"//' -e 's/"$//')
                    echo $url_upload_arn > ./arn.txt
                    curl -T app-debug.apk $url_upload_app 
                    sleep 180
                    echo "app uploaded"
               
                - name: upload tests files
                  run: |
                   response_upload_test=$(aws devicefarm create-upload --project-arn ${{secrets.PROJECT_ARN}} --name tests.zip --type APPIUM_PYTHON_TEST_PACKAGE)
                   echo $response_upload_test
                   url_upload_test=$(echo $response_upload_test | jq '.upload.url' | sed -e 's/^"//' -e 's/"$//')
                   arn_upload_test=$(echo $response_upload_test | jq '.upload.arn' | sed -e 's/^"//' -e 's/"$//')
                   echo $arn_upload_test > testArn.txt
                   curl -T tests.zip $url_upload_test
                   sleep 180
                   echo "test uploaded"
                   
                   
                - name: get-upload
                  run: |
                    arn_upload_app=`cat arn.txt`
                    arn_upload_test=`cat testArn.txt`
                    app_upload=$(aws devicefarm get-upload --arn $arn_upload_app)
                    echo $app_upload
                    sleep 10
                    response_run_tests=$(aws devicefarm schedule-run --project-arn ${{secrets.PROJECT_ARN}} --app-arn $arn_upload_app --device-pool-arn ${{secrets.AWS_DEVICE_POOL_ARN}} --name 'first_cli_run' --test type=APPIUM_PYTHON,testPackageArn=$arn_upload_test)
                    echo $response_run_tests
                    arn_test_run=$(echo $response_run_tests | jq '.run.arn' | sed -e 's/^"//' -e 's/"$//')
                    echo $arn_test_run > runtime_arn.txt
                    aws_resp=$(echo $response_run_tests | jq '.run.status')
                    while [ "$aws_resp" != *"COMPLETED"* ]
                    do
                      echo "entering while..."
                      sleep 30
                      aws_resp=$(aws devicefarm get-run --arn $arn_test_run | jq '.run.status')
                      if [[ "$aws_resp" == *"COMPLETED"* ]]; then 
                      echo "COMPLETED" 
                      break
                      fi
                    done
                    echo "$aws_resp"
                    
                    aws_resp=$(aws devicefarm get-run --arn $arn_test_run | jq '.run.counters')
                    echo $aws_resp > aws_response_result.json

